syntax = "proto3";

service MusicalServer {

    rpc GenerateMusicalFormParameters (GenerateMusicalFormParametersRequest) returns (GenerateMusicalFormParametersResponse);

}

message Pitch {
    int32 midiIndex = 1;
    string base = 2;
    int32 alteration = 3;
    string nameWithOctave = 4;
}

message PitchRange {
  Pitch lowPitch = 1;
  Pitch highPitch = 2;
}

message Instrument {
  string id = 1;
  string name = 2;

  PitchRange soundingRange = 3;
  repeated PitchRegister pitchRegisters = 4;
}

message PitchRegister {
  string id = 1;
  string name = 2;

  PitchRange pitchRange = 3;
}

message PlayingTechnique {
  string id = 1;
  string name = 2;

  PitchRange soundingRange = 3;
}

enum Dynamics {
  ppp = 0;
  pp = 1;
  p = 2;
  mp = 3;
  mf = 4;
  f = 5;
  ff = 6;
  fff = 7;
}

message ToneQuality {
  string id = 1;
  string name = 2;
}

message ToneQualityReference {
  string id = 1;
  ToneQuality toneQuality = 2;
  optional Instrument instrument = 3;
  optional PitchRegister pitchRegister = 4;
  optional PlayingTechnique playingTechnique = 5;
  optional Dynamics dynamic = 6;
  optional ReferencePassage referencePassage = 7;
}

message ReferencePassage {
  string id = 1;

  opus                  Opus                   @relation(fields: [opus_id], references: [id])
  opus_id               String

  movement Int
  measure  Int
}

message Opus {
  string id = 1;
  string name = 2;

  composer    Composer @relation(fields: [composer_id], references: [id])
  composer_id String

  referencePassages ReferencePassage[]
}

message Composer {
  string name = 2;
}

message Score {
  string name = 2;
}

message Recording {
  string name = 2;
}

